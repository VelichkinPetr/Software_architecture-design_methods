import tkinter as tk
from tkinter import ttk, messagebox

from WeatherInformer.src.GUI.widget_factorys import LightThemeFactory, DarkThemeFactory, AWidgetFactory
from WeatherInformer.src.weather_model import WeatherView
from WeatherInformer.src.weather_model import WeatherData

# –ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
class WeatherApp:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("–ü–æ–≥–æ–¥–Ω—ã–π –∏–Ω—Ñ–æ—Ä–º–∞—Ç–æ—Ä - WeatherAPI")
        self.root.geometry("1000x550")
        self.view = WeatherView

        self.weather_data = WeatherData()
        self.current_factory = LightThemeFactory()
        self.views = self.weather_data.get_observers()

        self.create_widgets()
        self.load_default_cities()

    def remove_view(self, view: WeatherView):
        if view in self.views:
            self.views.remove(view)
        else:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", f"–¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç!")
            return

    def create_widgets(self):
        # –ì–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º
        main_frame = self.current_factory.create_frame(self.root)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = self.current_factory.create_label(main_frame,
                                                        text="üå§Ô∏è –ü–æ–≥–æ–¥–Ω—ã–π –ò–Ω—Ñ–æ—Ä–º–∞—Ç–æ—Ä",
                                                        font=('Arial', 16, 'bold'))
        title_label.pack(pady=10)

        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = self.current_factory.create_frame(main_frame)
        control_frame.pack(fill=tk.X, pady=10)

        # –ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞
        search_frame = self.current_factory.create_frame(control_frame)
        search_frame.pack(side=tk.LEFT, padx=10)

        self.current_factory.create_label(search_frame, text="–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥:", font=('Arial', 10)).pack(side=tk.LEFT)

        self.city_entry = self.current_factory.create_entry(search_frame, width=20, font=('Arial', 10))
        self.city_entry.pack(side=tk.LEFT, padx=5)

        self.city_entry.bind('<Return>', lambda e: self.add_city())

        add_button = self.current_factory.create_button(search_frame,
                                                        text="‚ûï –î–æ–±–∞–≤–∏—Ç—å",
                                                        command=self.add_city,
                                                        font=('Arial', 10))
        add_button.pack(side=tk.LEFT, padx=5)

        # –ö–Ω–æ–ø–∫–∏ —Å–º–µ–Ω—ã —Ç–µ–º—ã
        theme_frame = self.current_factory.create_frame(control_frame)
        theme_frame.pack(side=tk.RIGHT, padx=10)

        light_theme_btn = self.current_factory.create_button(theme_frame,
                                                             text="üåû –°–≤–µ—Ç–ª–∞—è",
                                                             command=self.set_light_theme,
                                                             font=('Arial', 9))
        light_theme_btn.pack(side=tk.LEFT, padx=2)

        dark_theme_btn = self.current_factory.create_button(theme_frame,
                                                            text="üåô –¢—ë–º–Ω–∞—è",
                                                            command=self.set_dark_theme,
                                                            font=('Arial', 9))
        dark_theme_btn.pack(side=tk.LEFT, padx=2)

        # –§—Ä–µ–π–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        container_frame = self.current_factory.create_frame(main_frame)
        container_frame.pack(fill=tk.BOTH, expand=True)

        # –°–æ–∑–¥–∞–µ–º Canvas –∏ Scrollbar –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        canvas = tk.Canvas(container_frame, bg=self.current_factory.create_frame(container_frame).cget('bg'))
        scrollbar = ttk.Scrollbar(canvas, orient="horizontal", command=canvas.xview)

        self.weather_frame = self.current_factory.create_frame(canvas)
        self.weather_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )

        canvas.create_window((0, 0), window=self.weather_frame, anchor="nw")
        canvas.configure(xscrollcommand=scrollbar.set)

        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="bottom", fill="x")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫–æ–ª–µ—Å–∏–∫–æ–º –º—ã—à–∏
        def _on_mousewheel(event):
            canvas.xview_scroll(int(-1 * (event.delta / 120)), "units")

        canvas.bind("<MouseWheel>", _on_mousewheel)

    def add_city(self):
        city = self.city_entry.get().strip()
        if city:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞
            for view in self.views:
                if view.city.lower() == city.lower():
                    messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", f"–ì–æ—Ä–æ–¥ {city} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω")
                    return

            self.create_weather_view(city)
            self.weather_data.fetch_weather_data(city)
            self.city_entry.delete(0, tk.END)
        else:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞")

    def create_weather_view(self, city: str):
        view = self.view(self.weather_frame, city, self.weather_data, self.current_factory)
        view.frame.pack(fill=tk.X, padx=5, pady=5, side= tk.LEFT)


    def load_default_cities(self):
        default_cities = ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–õ–æ–Ω–¥–æ–Ω", "–ù—å—é-–ô–æ—Ä–∫"]
        for city in default_cities:
            self.create_weather_view(city)
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã API
            self.root.after(500 * default_cities.index(city),
                            lambda c=city: self.weather_data.fetch_weather_data(c))

    def set_light_theme(self):
        self.change_theme(LightThemeFactory())

    def set_dark_theme(self):
        self.change_theme(DarkThemeFactory())

    def change_theme(self, factory: AWidgetFactory):
        self.current_factory = factory

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –≥–æ—Ä–æ–¥–∞
        current_cities = [view.city for view in self.views]

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≤—å—é—Ö–∏
        for view in self.views:
            view.destroy()

        self.views.clear()

        # –û—á–∏—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        for widget in self.root.winfo_children():
            widget.destroy()

        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.create_widgets()

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–æ—Ä–æ–¥–∞ —Å –Ω–æ–≤–æ–π —Ç–µ–º–æ–π
        for city in current_cities:
            self.create_weather_view(city)

    def run(self):
        self.root.mainloop()


